using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using QuestPDF.WebApiSample.Models;

namespace QuestPDF.WebApiSample.Documents;

/// <summary>
/// Dynamic Column Report Document
/// Demonstrates how to create reports with a variable number of columns determined at runtime
/// </summary>
public class DynamicColumnReportDocument : IDocument
{
    private DynamicColumnReportModel Model { get; }

    public DynamicColumnReportDocument(DynamicColumnReportModel model)
    {
        Model = model;
    }

    public DocumentMetadata GetMetadata() => DocumentMetadata.Default;
    public DocumentSettings GetSettings() => DocumentSettings.Default;

    public void Compose(IDocumentContainer container)
    {
        container.Page(page =>
        {
            page.Size(PageSizes.A4);
            page.Margin(40);
            page.PageColor(Colors.White);
            page.DefaultTextStyle(x => x.FontSize(10));

            page.Header().Element(ComposeHeader);
            page.Content().Element(ComposeContent);
            page.Footer().Element(ComposeFooter);
            
            // Add watermark
            page.Foreground().Element(ComposeWatermark);
        });
    }

    void ComposeWatermark(IContainer container)
    {
        var watermark = ImageHelper.GetWatermark();
        if (watermark != null && watermark.Length > 0)
        {
            container.AlignCenter().AlignMiddle().Width(400).Image(watermark);
        }
    }

    void ComposeHeader(IContainer container)
    {
        container.Column(column =>
        {
            column.Spacing(8);

            column.Item().AlignCenter().Text(Model.ReportTitle)
                .FontSize(20)
                .Bold()
                .FontColor(Colors.Blue.Darken3);

            if (!string.IsNullOrEmpty(Model.ReportSubtitle))
            {
                column.Item().AlignCenter().Text(Model.ReportSubtitle)
                    .FontSize(12)
                    .FontColor(Colors.Grey.Darken1);
            }

            column.Item().BorderBottom(2).BorderColor(Colors.Blue.Darken3).PaddingBottom(10).Row(row =>
            {
                row.RelativeItem().Text(text =>
                {
                    text.Span("Generated: ").SemiBold();
                    text.Span(Model.GeneratedDate.ToString("dd-MMM-yyyy HH:mm"));
                });

                if (!string.IsNullOrEmpty(Model.GeneratedBy))
                {
                    row.RelativeItem().AlignRight().Text(text =>
                    {
                        text.Span("Generated By: ").SemiBold();
                        text.Span(Model.GeneratedBy);
                    });
                }
                
                // Logo in top right
                row.ConstantItem(80).Column(logoCol =>
                {
                    var logo = ImageHelper.GetCompanyLogo();
                    if (logo != null && logo.Length > 0)
                    {
                        logoCol.Item().Height(50).Image(logo, ImageScaling.FitArea);
                    }
                });
            });
        });
    }

    void ComposeContent(IContainer container)
    {
        container.PaddingTop(20).Column(column =>
        {
            column.Spacing(10);

            // Dynamic table with variable columns
            column.Item().Table(table =>
            {
                // Define columns - first column for row labels, rest for data
                table.ColumnsDefinition(columns =>
                {
                    columns.RelativeColumn(2); // Row label column (wider)
                    for (int i = 0; i < Model.ColumnHeaders.Count; i++)
                    {
                        columns.RelativeColumn(); // Data columns (equal width)
                    }
                });

                // Header row
                table.Header(header =>
                {
                    // First header cell
                    header.Cell().Element(HeaderStyle).Text("Category").SemiBold();
                    
                    // Dynamic header cells
                    foreach (var headerText in Model.ColumnHeaders)
                    {
                        header.Cell().Element(HeaderStyle).AlignCenter().Text(headerText).SemiBold();
                    }

                    IContainer HeaderStyle(IContainer c) => c
                        .Background(Colors.Blue.Darken3)
                        .Padding(8)
                        .DefaultTextStyle(x => x.FontSize(10).FontColor(Colors.White));
                });

                // Data rows
                foreach (var dataRow in Model.DataRows)
                {
                    var bgColor = dataRow.IsHighlighted ? Colors.Yellow.Lighten3 : Colors.White;
                    
                    // Row label cell
                    table.Cell().Element(c => CellStyle(c, bgColor)).Text(dataRow.RowLabel).SemiBold();
                    
                    // Dynamic data cells
                    for (int i = 0; i < Model.ColumnHeaders.Count; i++)
                    {
                        var value = i < dataRow.Values.Count ? dataRow.Values[i] : "";
                        table.Cell().Element(c => CellStyle(c, bgColor)).AlignRight().Text(value);
                    }
                }

                // Summary row if exists
                if (Model.SummaryRow != null)
                {
                    table.Cell().Element(c => SummaryCellStyle(c)).Text(Model.SummaryRow.RowLabel).Bold();
                    
                    for (int i = 0; i < Model.ColumnHeaders.Count; i++)
                    {
                        var value = i < Model.SummaryRow.Values.Count ? Model.SummaryRow.Values[i] : "";
                        table.Cell().Element(c => SummaryCellStyle(c)).AlignRight().Text(value).Bold();
                    }
                }

                IContainer CellStyle(IContainer c, string bgColor) => c
                    .Border(1)
                    .BorderColor(Colors.Grey.Lighten2)
                    .Background(bgColor)
                    .Padding(8);

                IContainer SummaryCellStyle(IContainer c) => c
                    .Border(1)
                    .BorderColor(Colors.Blue.Darken3)
                    .Background(Colors.Blue.Lighten4)
                    .Padding(8);
            });

            // Footer notes
            if (!string.IsNullOrEmpty(Model.FooterNotes))
            {
                column.Item().PaddingTop(15).Background(Colors.Grey.Lighten4).Padding(10).Column(col =>
                {
                    col.Item().Text("Notes:").FontSize(9).SemiBold();
                    col.Item().Text(Model.FooterNotes).FontSize(9);
                });
            }
        });
    }

    void ComposeFooter(IContainer container)
    {
        container.AlignCenter().DefaultTextStyle(x => x.FontSize(9).FontColor(Colors.Grey.Darken1)).Text(text =>
        {
            text.Span("Page ");
            text.CurrentPageNumber();
            text.Span(" of ");
            text.TotalPages();
        });
    }
}
