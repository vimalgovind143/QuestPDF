using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using QuestPDF.WebApiSample.Models;

namespace QuestPDF.WebApiSample.Documents;

/// <summary>
/// Generic Report Document
/// Creates PDFs from flexible data input with report name, date filter, columns, and data
/// </summary>
public class GenericReportDocument : IDocument
{
    private GenericReportModel Model { get; }

    public GenericReportDocument(GenericReportModel model)
    {
        Model = model;
    }

    public DocumentMetadata GetMetadata() => DocumentMetadata.Default;
    public DocumentSettings GetSettings() => DocumentSettings.Default;

    public void Compose(IDocumentContainer container)
    {
        container.Page(page =>
        {
            // Set page size based on orientation
            if (Model.PageOrientation?.Equals("Landscape", StringComparison.OrdinalIgnoreCase) == true)
            {
                page.Size(PageSizes.A4.Landscape());
            }
            else
            {
                page.Size(PageSizes.A4);
            }

            page.Margin(40);
            page.PageColor(Colors.White);
            page.DefaultTextStyle(x => x.FontSize(10));

            page.Header().Element(ComposeHeader);
            page.Content().Element(ComposeContent);
            page.Footer().Element(ComposeFooter);

            // Add watermark
            page.Foreground().Element(ComposeWatermark);
        });
    }

    void ComposeWatermark(IContainer container)
    {
        var watermark = ImageHelper.GetWatermark();
        if (watermark != null && watermark.Length > 0)
        {
            container.AlignCenter().AlignMiddle().Width(400).Image(watermark);
        }
    }

    void ComposeHeader(IContainer container)
    {
        var isRTL = Model.TextDirection?.Equals("RTL", StringComparison.OrdinalIgnoreCase) == true;

        container.Column(column =>
        {
            column.Spacing(10);

            // Header logo - centered at the top (if provided)
            byte[]? headerLogo = null;
            
            if (!string.IsNullOrEmpty(Model.HeaderLogoBase64))
            {
                try
                {
                    headerLogo = Convert.FromBase64String(Model.HeaderLogoBase64);
                }
                catch
                {
                    // If base64 decode fails, fall back to default logo
                    headerLogo = ImageHelper.GetCompanyLogo();
                }
            }
            else
            {
                headerLogo = ImageHelper.GetCompanyLogo();
            }

            if (headerLogo != null && headerLogo.Length > 0)
            {
                column.Item().AlignCenter().Height(60).Image(headerLogo, ImageScaling.FitArea);
            }

            // Report title
            column.Item().AlignCenter().Text(Model.ReportName)
                .FontSize(20)
                .Bold()
                .FontColor(Colors.Blue.Darken3);

            if (!string.IsNullOrEmpty(Model.DateFilter))
            {
                column.Item().AlignCenter().Text($"Period: {Model.DateFilter}")
                    .FontSize(12)
                    .FontColor(Colors.Grey.Darken1);
            }

            // Generated info and border
            column.Item().BorderBottom(2).BorderColor(Colors.Blue.Darken3).PaddingBottom(10).Row(row =>
            {
                row.RelativeItem().Text(text =>
                {
                    text.Span("Generated: ").SemiBold();
                    text.Span(DateTime.Now.ToString("dd-MMM-yyyy HH:mm"));
                });

                if (!string.IsNullOrEmpty(Model.GeneratedBy))
                {
                    row.RelativeItem().AlignRight().Text(text =>
                    {
                        text.Span("Generated By: ").SemiBold();
                        text.Span(Model.GeneratedBy);
                    });
                }
            });
        });
    }

    void ComposeContent(IContainer container)
    {
        container.PaddingTop(20).Column(column =>
        {
            column.Spacing(10);

            // Determine text direction
            var isRTL = Model.TextDirection?.Equals("RTL", StringComparison.OrdinalIgnoreCase) == true;

            // Data table
            column.Item().Table(table =>
            {
                // Define columns based on text direction
                table.ColumnsDefinition(columns =>
                {
                    if (isRTL)
                    {
                        // RTL: Data columns first, then row number column on the right
                        foreach (var _ in Model.ColumnNames)
                        {
                            columns.RelativeColumn(); // Data columns (equal width)
                        }
                        columns.ConstantColumn(30); // Row number column on the right
                    }
                    else
                    {
                        // LTR: Row number column first, then data columns
                        columns.ConstantColumn(30); // Row number column on the left
                        foreach (var _ in Model.ColumnNames)
                        {
                            columns.RelativeColumn(); // Data columns (equal width)
                        }
                    }
                });

                // Header row
                table.Header(header =>
                {
                    if (isRTL)
                    {
                        // RTL: Headers from right to left, row number on the right
                        for (int i = Model.ColumnNames.Count - 1; i >= 0; i--)
                        {
                            var headerText = Model.ColumnNames[i];
                            header.Cell().Element(HeaderStyle).AlignCenter().Text(headerText).SemiBold();
                        }
                        // Row number header on the right
                        header.Cell().Element(HeaderStyle).Text("#").SemiBold();
                    }
                    else
                    {
                        // LTR: Row number on the left, then headers from left to right
                        header.Cell().Element(HeaderStyle).Text("#").SemiBold();
                        foreach (var headerText in Model.ColumnNames)
                        {
                            header.Cell().Element(HeaderStyle).AlignCenter().Text(headerText).SemiBold();
                        }
                    }

                    IContainer HeaderStyle(IContainer c) => c
                        .Background(Colors.Blue.Darken3)
                        .Padding(8)
                        .DefaultTextStyle(x => x.FontSize(10).FontColor(Colors.White));
                });

                // Data rows
                for (int rowIndex = 0; rowIndex < Model.Data.Count; rowIndex++)
                {
                    var rowData = Model.Data[rowIndex];

                    if (isRTL)
                    {
                        // RTL: Data cells from right to left, row number on the right
                        for (int colIndex = Model.ColumnNames.Count - 1; colIndex >= 0; colIndex--)
                        {
                            var value = colIndex < rowData.Count ? rowData[colIndex] : "";
                            table.Cell().Element(c => CellStyle(c)).AlignCenter().Text(value);
                        }
                        // Row number cell on the right
                        table.Cell().Element(c => CellStyle(c)).AlignCenter().Text((rowIndex + 1).ToString());
                    }
                    else
                    {
                        // LTR: Row number on the left, then data cells from left to right
                        table.Cell().Element(c => CellStyle(c)).AlignCenter().Text((rowIndex + 1).ToString());
                        for (int colIndex = 0; colIndex < Model.ColumnNames.Count; colIndex++)
                        {
                            var value = colIndex < rowData.Count ? rowData[colIndex] : "";
                            table.Cell().Element(c => CellStyle(c)).AlignCenter().Text(value);
                        }
                    }
                }

                // Summary row if exists
                if (Model.SummaryRow != null && Model.SummaryRow.Any())
                {
                    if (isRTL)
                    {
                        // RTL: Summary values from right to left, sum symbol on the right
                        for (int i = Model.ColumnNames.Count - 1; i >= 0; i--)
                        {
                            var value = i < Model.SummaryRow.Count ? Model.SummaryRow[i] : "";
                            table.Cell().Element(c => SummaryCellStyle(c)).AlignCenter().Text(value).Bold();
                        }
                        table.Cell().Element(c => SummaryCellStyle(c)).AlignCenter().Text("∑");
                    }
                    else
                    {
                        // LTR: Sum symbol on the left, then summary values from left to right
                        table.Cell().Element(c => SummaryCellStyle(c)).AlignCenter().Text("∑");
                        for (int i = 0; i < Model.ColumnNames.Count; i++)
                        {
                            var value = i < Model.SummaryRow.Count ? Model.SummaryRow[i] : "";
                            table.Cell().Element(c => SummaryCellStyle(c)).AlignCenter().Text(value).Bold();
                        }
                    }
                }

                IContainer CellStyle(IContainer c) => c
                    .Border(1)
                    .BorderColor(Colors.Grey.Lighten2)
                    .Background(Colors.White)
                    .Padding(8);

                IContainer SummaryCellStyle(IContainer c) => c
                    .Border(1)
                    .BorderColor(Colors.Blue.Darken3)
                    .Background(Colors.Blue.Lighten4)
                    .Padding(8);
            });

            // Footer notes
            if (!string.IsNullOrEmpty(Model.FooterNotes))
            {
                var notesLabel = isRTL ? "ملاحظات:" : "Notes:";
                column.Item().PaddingTop(15).Background(Colors.Grey.Lighten4).Padding(10).Column(col =>
                {
                    col.Item().Text(notesLabel).FontSize(9).SemiBold();
                    col.Item().Text(Model.FooterNotes).FontSize(9);
                });
            }
        });
    }

    void ComposeFooter(IContainer container)
    {
        container.Column(column =>
        {
            column.Spacing(5);

            // Footer logo - centered (if provided)
            if (!string.IsNullOrEmpty(Model.FooterLogoBase64))
            {
                try
                {
                    var footerLogo = Convert.FromBase64String(Model.FooterLogoBase64);
                    if (footerLogo != null && footerLogo.Length > 0)
                    {
                        column.Item().AlignCenter().Height(35).Image(footerLogo, ImageScaling.FitArea);
                    }
                }
                catch
                {
                    // If base64 decode fails, skip footer logo
                }
            }

            // Page number and printing date/time - centered below logo
            column.Item().Row(row =>
            {
                row.RelativeItem().AlignCenter().DefaultTextStyle(x => x.FontSize(9).FontColor(Colors.Grey.Darken1)).Text(text =>
                {
                    text.Span("Page ");
                    text.CurrentPageNumber();
                    text.Span(" of ");
                    text.TotalPages();
                    text.Span("  |  ");
                    text.Span("Printed: ");
                    text.Span(DateTime.Now.ToString("dd-MMM-yyyy HH:mm"));
                });
            });
        });
    }
}